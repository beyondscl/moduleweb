<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置自动扫描包 -->
    <context:component-scan base-package="com.bird"/>
    <!-- 使AspectJ注解起作用：自动为匹配的类生产代理对象 -->
    <aop:aspectj-autoproxy/>

    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:mq.properties</value>
            </list>
        </property>
    </bean>

    <!--ActiveMQ相关配置 -->
    <bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
          destroy-method="stop">
        <property name="connectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <!--消息服务连接信息 -->
                <property name="brokerURL">
                    <value>tcp://${mq.host}:${mq.port}</value>
                </property>
                <property name="userName">
                    <value>${mq.user}</value>
                </property>
                <property name="password">
                    <value>${mq.pass}</value>
                </property>
            </bean>
        </property>
        <!--最大连接数，因为上面是使用了pool -->
        <property name="maxConnections" value="100"></property>
    </bean>
    <!-- queue目的地配置 -->
    <bean id="destination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg index="0" value="spring-queue" />
    </bean>
    <!-- topic目的地配置，其实不管是topic还是queue则他们的底层实现不同但是通过封装api就差不多了，而在spring中更是简单 -->
    <bean id="destinationTopic" class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg index="0" value="spring-topic" />
    </bean>

    <!-- spring 使用jmsTemplate来实现消息的发送和接受 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="jmsFactory"></property>
        <!--目的地的设置，使用spring来使用activemq时，使用queue还是topic很方便，在这里引用不同地址就ok了 -->
        <property name="defaultDestination" ref="destination"></property>
        <!--转换器，我们自己可以继承重写这个类的方法 ，这里使用spring提供的默认方法 -->
        <property name="messageConverter">
            <bean
                    class="org.springframework.jms.support.converter.SimpleMessageConverter" />
        </property>
    </bean>

    <!--异步监听 -->
    <bean id="jmsContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="destination" ref="destination" />
        <property name="messageListener" ref="myMessageListener" />
    </bean>

</beans>